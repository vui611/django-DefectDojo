FROM debian:stretch AS libpqbuilder

RUN apt-get update && apt-get -y install curl ca-certificates gnupg dpkg-dev devscripts
RUN curl https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/trusted.gpg.d/apt.postgresql.org.gpg >/dev/null
RUN echo "deb-src http://apt.postgresql.org/pub/repos/apt/ stretch-pgdg main" >> /etc/apt/sources.list.d/pgdg.list

# get source packages
RUN cd ~ && apt-get update && apt-get source pgdg-keyring postgresql-common postgresql-14

# disable running the postgres test suite after building
ENV DEB_BUILD_OPTIONS=nocheck

# build deps for building postgres
RUN cd ~/pgdg-* && mk-build-deps -ir -t "apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends"
RUN cd ~/pgdg-* && debuild -i -us -uc -b
RUN cd ~/postgresql-common-* && mk-build-deps -ir -t "apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends"
RUN cd ~/postgresql-common-* && debuild -i -us -uc -b

# install deps
RUN apt install -y ~/pgdg-keyring_*.deb
RUN apt install -y ~/postgresql-client-common_*.deb
RUN apt install -y ~/postgresql-common_*.deb

# build postgres
RUN cd ~/postgresql-14-14.* && mk-build-deps -ir -t "apt-get -o Debug::pkgProblemResolver=yes -y --no-install-recommends"
RUN cd ~/postgresql-14-14.* && debuild -i -us -uc -b

RUN mkdir /out && mv ~/libpq-dev_*.deb /out/ && mv ~/libpq5_*.deb /out/
RUN ls -alh /out

# code: language=Dockerfile

FROM python:3.8.13-bullseye as base 
WORKDIR /app
RUN \
  apt-get -y update && \
  apt-get -y install \
    git \
    wget \
    libssl-dev libldap-2.4-2 \
    curl \
    unzip \
    gpg \
    && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true

COPY --from=libpqbuilder /out/libpq-dev_14.4-1.pgdg90+1_arm64.deb /var/cache/apt/archives/
COPY --from=libpqbuilder /out/libpq5_14.4-1.pgdg90+1_arm64.deb /var/cache/apt/archives/
# install libpq
RUN dpkg -i /var/cache/apt/archives/libpq-dev_14.4-1.pgdg90+1_arm64.deb /var/cache/apt/archives/libpq5_14.4-1.pgdg90+1_arm64.deb
RUN pip install psycopg2==2.9.3


# Installing Google Chrome browser
RUN \
  curl -sS -o - https://dl.google.com/linux/linux_signing_key.pub | apt-key add && \
  echo "deb [arch=amd64]  http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list && \
  apt-get -y update && \
  apt-get -y install \
    google-chrome-stable \
  && \
  apt-get clean && \
  rm -rf /var/lib/apt/lists && \
  true

RUN pip install --no-cache-dir selenium requests chromedriver-autoinstaller

# Installing Chromedriver
WORKDIR /opt/chrome-driver
RUN \
  python -c "import chromedriver_autoinstaller; chromedriver_autoinstaller.install(cwd=True)" && \
  chmod -R 0755 .
WORKDIR /app

COPY docker/wait-for-it.sh \
  docker/entrypoint-integration-tests.sh \
  /

COPY tests/ ./tests/

RUN chmod -R 0777 /app

ARG uid=1001
USER ${uid}
ENV \
  DD_ADMIN_USER=admin \
  DD_ADMIN_PASSWORD='' \
  DD_BASE_URL="http://localhost:8080/"
CMD ["/entrypoint-integration-tests.sh"]
